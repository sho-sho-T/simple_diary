---
description: コーディングのルール
globs: app**/*, prisma/**/*, 
alwaysApply: false
---
---
description: コーディングのルール
globs: 
  - "app/**/*"
  - "components/**/*"
  - "lib/**/*"
  - "types/**/*"
  - "prisma/**/*"
  - "*.ts"
  - "*.tsx"
  - "*.json"
alwaysApply: false
---

コードスタイルと構造
- 簡潔で技術的な TypeScript コードを正確な例とともに記述する
- 関数型・宣言型プログラミングパターンを使用し、クラスは避ける
- コードの重複を避け、反復処理とモジュール化を優先する
- 補助動詞を含む説明的な変数名を使用する（例：isLoading、hasError）
- ファイル構造：エクスポートされるコンポーネント、サブコンポーネント、ヘルパー関数、静的コンテンツ、型定義の順

命名規則
- ディレクトリ名はダッシュ付きの小文字を使用（例：components/auth-wizard）
- コンポーネントは名前付きエクスポートを推奨

TypeScript の使用
- すべてのコードで TypeScript を使用し、型よりもインターフェースを優先
- enum は避け、代わりに map を使用
- TypeScript インターフェースを使用した関数コンポーネントを使用

Storybook の使用
- コンポーネントの作成時、更新時にそのコンポーネントに対応するstorybookを作成する

構文とフォーマット
- 純粋関数には アロー関数を使用
- 条件文での不要な中括弧は避け、シンプルな文には簡潔な構文を使用
- 宣言的な JSX を使用

UI とスタイリング
- コンポーネントとスタイリングには Shadcn UI、Radix、Tailwind を使用
- Tailwind CSS でレスポンシブデザインを実装し、モバイルファーストアプローチを採用
- デザインシステムは Shadcn UI を使用

パフォーマンス最適化
- 'use client'、'useEffect'、'setState' の使用を最小限に抑え、React Server Components (RSC) を優先
- クライアントコンポーネントは fallback 付きの Suspense でラップ
- 重要度の低いコンポーネントには動的ローディングを使用
- 画像の最適化：WebP フォーマットの使用、サイズデータの含有、遅延ローディングの実装

主要な規則
- URL検索パラメータの状態管理には 'nuqs' を使用
- Web Vitals（LCP、CLS、FID）の最適化
- 'use client' の制限：
  - サーバーコンポーネントと Next.js SSR を優先
  - Web API アクセスは小規模なコンポーネントでのみ使用
  - データフェッチングや状態管理での使用は避ける

データフェッチング、レンダリング、ルーティングについては Next.js のドキュメントに従ってください。
