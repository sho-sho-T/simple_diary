// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuthで使用するユーザー情報
// https://authjs.dev/getting-started/adapters/prisma?framework=qwik

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 日記アプリのリレーション
  diaryEntries DiaryEntry[]
  tags         Tag[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// 日記アプリのモデル定義
model Tag {
  id        String     @id @default(cuid())
  userId    String
  name      String     @db.VarChar(50)
  color     String     @db.VarChar(20)
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries   DiaryTag[]

  @@unique([userId, name])
  @@index([userId])
}

model DiaryEntry {
  id              String     @id @default(cuid())
  userId          String
  entryDate       DateTime   @db.Date
  content         String?    @db.Text
  contentMarkdown String?    @db.Text
  emotionStampId  Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags            DiaryTag[]

  @@unique([userId, entryDate])
  @@index([userId, entryDate])
}

model DiaryTag {
  entryId String
  tagId   String
  entry   DiaryEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  tag     Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([entryId, tagId])
  @@index([entryId])
}