generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  diaryEntries  DiaryEntry[]
  sessions      Session[]
  tags          Tag[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tag {
  id        String     @id @default(cuid())
  userId    String
  name      String     @db.VarChar(50)
  color     String     @db.VarChar(20)
  createdAt DateTime   @default(now())
  entries   DiaryTag[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

model DiaryEntry {
  id             String     @id @default(cuid())
  userId         String
  entryDate      DateTime   @db.Date
  content        String?
  emotionStampId Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags           DiaryTag[]

  @@unique([userId, entryDate])
  @@index([userId, entryDate])
}

model DiaryTag {
  entryId String
  tagId   String
  entry   DiaryEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  tag     Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([entryId, tagId])
  @@index([entryId])
}
